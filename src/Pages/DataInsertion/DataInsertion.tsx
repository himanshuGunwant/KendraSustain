import * as React from 'react';
import { styled } from '@mui/material/styles';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TablePagination from '@mui/material/TablePagination';
import TableRow from '@mui/material/TableRow';
import { Container } from './DataInsertion.style';

const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: theme.palette.common.black,
    color: theme.palette.common.white,
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: 14,
  },
}));

const columns = [
  { id: 'name', label: 'Data Feeds', minWidth: 170 },
  { id: 'code', label: 'Crated-On', minWidth: 100 },
  {
    id: 'population',
    label: 'Status',
    minWidth: 170,
    align: 'right',
    format: (value: any) => value.toLocaleString('en-US'),
  },
];

function createData(name: any, code: any, population: any) {
  return { name, code, population };
}

// TODO : refactor all the code

const rows = [
  createData(
    <a href="https://flow.kendrasustain.com/workflow/3">
      Carbon Intensity Realtime Data Flow For UK
    </a>,
    '19-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/22">
      Premier Modular Real Estate Energy Consumption Data Flow
    </a>,
    '19-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/14">
      {' '}
      Current settlement BSUoS data Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/13">
      Daily Balancing Cost Data Flow{' '}
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/12">
      Historic GTMA Trade Data Flow{' '}
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/10">
      {' '}
      Energy Price Data Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/8">
      Elexon Energy Transmit Flow
    </a>,
    '20-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/7">
      Solar Energy Data Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/6">
      Wind Energy Data Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/2">
      Carbon Intensity Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/11">
      STOR DA Auction Result Data Flow{' '}
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/19">Goby Data Flow</a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/15">LSBU Data Flow</a>,
    '19-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/9">
      Energy Generated By Fuel Data Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/5">
      Elexon Energy Demand Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
  createData(
    <a href="https://flow.kendrasustain.com/workflow/4">
      Elexon Energy Frequency Flow
    </a>,
    '18-11-2021',
    'Active',
  ),
];

export default function ActiveFlow() {
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(10);

  const handleChangePage = (event: any, newPage: any) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: any) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };

  return (
    <Container>
      <Paper sx={{ width: '100%' }}>
        <TableContainer sx={{ maxHeight: 500 }}>
          <Table stickyHeader aria-label="sticky table">
            <TableHead>
              <TableRow>
                <StyledTableCell
                  align="center"
                  colSpan={12}
                  style={{ fontWeight: 'bold', fontSize: '25px' }}
                >
                  Flows
                </StyledTableCell>
              </TableRow>
              <TableRow>
                {columns.map((column, pos) => (
                  <TableCell
                    key={pos}
                    align={column.align as any}
                    style={{ top: 57, minWidth: column.minWidth }}
                  >
                    {column.label}
                  </TableCell>
                ))}
              </TableRow>
            </TableHead>
            <TableBody>
              {rows
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map((row, pos) => {
                  return (
                    <TableRow hover role="checkbox" tabIndex={-1} key={pos}>
                      {columns.map((column, pos) => {
                        const value = (row as any)[column.id];
                        return (
                          <TableCell key={pos} align={column.align as any}>
                            {column.format && typeof value === 'number'
                              ? column.format(value)
                              : value}
                          </TableCell>
                        );
                      })}
                    </TableRow>
                  );
                })}
            </TableBody>
          </Table>
        </TableContainer>
        <TablePagination
          rowsPerPageOptions={[10, 25, 100]}
          component="div"
          count={rows.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onPageChange={handleChangePage}
          onRowsPerPageChange={handleChangeRowsPerPage}
        />
      </Paper>
    </Container>
  );
}
